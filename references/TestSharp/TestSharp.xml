<?xml version="1.0"?>
<doc>
    <assembly>
        <name>TestSharp</name>
    </assembly>
    <members>
        <member name="T:TestSharp.AssertFailedException">
            <summary>
            Excepetion used when an assertion failed.
            </summary>
        </member>
        <member name="M:TestSharp.AssertFailedException.#ctor(System.String)">
            <summary>
            Initializes a new <see cref="T:TestSharp.AssertFailedException"/> instance.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="T:TestSharp.AssertHelper">
            <summary>
            Asserts utilities.
            </summary>
        </member>
        <member name="M:TestSharp.AssertHelper.ThrowAssert(System.String,System.String,System.Object,System.Object)">
            <summary>
            Throws the assert.
            </summary>
            <param name="assertClass">The assert class.</param>
            <param name="assertMethod">The assert method.</param>
            <param name="expected">The expected.</param>
            <param name="actual">The actual.</param>
        </member>
        <member name="M:TestSharp.AssertHelper.AreEqual(System.String,System.String,System.String,System.String)">
            <summary>
            Assert if x and y are equal
            </summary>
            <param name="assertClass">The assert class.</param>
            <param name="assertMethod">The assert method.</param>
            <param name="expected">The expected value to compare.</param>
            <param name="actual">The actual value to compare.</param>
        </member>
        <member name="T:TestSharp.ConfigAssert">
            <summary>
            Web.config and app.config asserts.
            </summary>
        </member>
        <member name="M:TestSharp.ConfigAssert.IsAppSetting(System.String,System.String,System.String)">
            <summary>
            Determines if the AppSettings value is the expected one.
            </summary>
            <returns><c>true</c> if is the expected value; otherwise, <c>false</c>.</returns>
            <param name="expectedValue">The expected value.</param>
            <param name="projectFolderName">The project folder name.</param>
            <param name="key">The aappSettings Key.</param>
        </member>
        <member name="T:TestSharp.ConfigHelper">
            <summary>
            Utilitários para web.config e app.config.
            </summary>
        </member>
        <member name="M:TestSharp.ConfigHelper.ReadConfig(System.String)">
            <summary>
            Lê o web.config/app.config do projeto da pasta informada.
            </summary>
            <param name="projectFolderName">O nome da pasta do projeto onde será lido o web.config/app.config.</param>
            <returns>Retornar a configuração lida do web.config/app.config.</returns>
        </member>
        <member name="M:TestSharp.ConfigHelper.ReadAppSetting(System.String,System.String)">
            <summary>
            Lê o valor de uma chave no AppSettings
            </summary>
            <param name="projectFolderName">O nome da pasta do projeto onde será lido o web.config/app.config.</param>
            <param name="key">O nome da chave na AppSettings.</param>
            <returns>O valor da chave.</returns>
        </member>
        <member name="M:TestSharp.ConfigHelper.WriteAppSetting(System.String,System.String,System.String)">
            <summary>
            Escreve o valor informado na chave do AppSettings
            </summary>
            <param name="projectFolderName">O nome da pasta do projeto onde será lido o web.config/app.config.</param>
            <param name="key">O nome da chave na AppSettings.</param>
            <param name="value">O valor a ser escrito na chave.</param>
        </member>
        <member name="M:TestSharp.ConfigHelper.GetFileConfigPath(System.String)">
            <summary>
            Obtém o caminho do arquivo de configuração do projeto informado.
            </summary>
            <param name="projectFolderName">O nome da pasta do projeto onde será lido o web.config/app.config.</param>
            <returns>O caminho do arquivo.</returns>
        </member>
        <member name="T:TestSharp.DateTimeAssert">
            <summary>
            Asserts para DateTime
            </summary>
        </member>
        <member name="M:TestSharp.DateTimeAssert.AreEqualIgnoringMilliseconds(System.DateTime,System.DateTime)">
            <summary>
            Verifica se duas datas são iguais desconsiderando os milisegundos, ou seja, compara até ano, mês, dia, horas, minutos e segundos.
            </summary>
            <param name="expectedDateTime">A data esperada.</param>
            <param name="actualDateTime">A data atual.</param>
        </member>
        <member name="M:TestSharp.DateTimeAssert.CreateDateTimeIgnoringMilliseconds(System.DateTime)">
            <summary>
            Cria um novo DateTime sem os milisegundos.
            </summary>
            <param name="orignal">O DateTime original.</param>
            <returns>O novo DateTime sem milisegundos.</returns>
        </member>
        <member name="T:TestSharp.DirectoryAssert">
            <summary>
            Asserts para diretórios.
            </summary>
        </member>
        <member name="M:TestSharp.DirectoryAssert.Exists(System.String)">
            <summary>
            Verfica se o diretório informado existe.
            </summary>
            <param name="directoryPath"></param>
        </member>
        <member name="M:TestSharp.DirectoryAssert.IsFilesCount(System.Int32,System.String,System.String,System.Boolean)">
            <summary>
            Verifica se o número de arquivos existentes no diretório é o esperado.
            </summary>
            <param name="expectedFilesCount">O número de arquivos esperado.</param>
            <param name="directoryPath">O diretório a ser contabilizado.</param>
            <param name="filePattern">O padrão para o nome dos arquivos a serem contados.</param>
            <param name="countSubdirectoriesFiles">Se deve contabilizar os arquivos dos subdiretórios.</param>
        </member>
        <member name="M:TestSharp.DirectoryAssert.IsAllFilesContent(System.String,System.String,System.String)">
            <summary>
            Verifica se o conteúdo de todos os arquivos é o esperado.
            </summary>
            <param name="expectedAllFilesContent">O conteúdo esperado de todos os arquivo. O conteúdo de cada arquivo é separado por uma nova linha (\r\n).</param>
            <param name="directoryPath">O diretório a ser lido.</param>
            <param name="filePattern">O padrão para o nome dos arquivos a serem lidos.</param>
        </member>
        <member name="M:TestSharp.DirectoryAssert.AreEqual(System.String,System.String)">
            <summary>
            Verifica se os diretórios são iguais (nomes e conteúdo dos arquivos e subdiretórios recursivamente).
            </summary>
            <param name="expectedDirectoryPath">O caminho do diretório esperado.</param>
            <param name="actualDirectoryPath">O caminho do diretório a ser comparado.</param>
        </member>
        <member name="T:TestSharp.DirectoryHelper">
            <summary>
            Utilitário para diretórios
            </summary>
        </member>
        <member name="M:TestSharp.DirectoryHelper.CountAllFiles(System.String,System.String,System.Boolean)">
            <summary>
            Conta o número de arquivos no diretório.
            </summary>
            <param name="directoryPath">O caminho do diretório.</param>
            <param name="filePattern">Filtro para os arquivos a serem contados.</param>
            <param name="countSubdirectoriesFiles">Se deve contar os arquivos dos subdiretórios.</param>
            <returns>O número de arquivos no diretório.</returns>
        </member>
        <member name="M:TestSharp.DirectoryHelper.CreateIfNotExists(System.String)">
            <summary>
            Cria o diretório se esse ainda não existir.
            </summary>
            <param name="directoryPath">O caminho do diretório.</param>
            <returns>True se o diretório foi criado, false no contrário.</returns>
        </member>
        <member name="M:TestSharp.DirectoryHelper.DeleteIfNotExists(System.String)">
            <summary>
            Exclui um diretório se esse existir.
            </summary>
            <param name="directoryPath">O caminho do diretório.</param>
            <returns>True se o diretório foi excluído, false no contrário.</returns>
        </member>
        <member name="M:TestSharp.DirectoryHelper.DeleteAllFiles(System.String,System.String,System.Boolean)">
            <summary>
            Remove todos os arquivos de um diretório.
            </summary>
            <param name="directoryPath">Caminho do diretório.</param>
            <param name="filePattern">Filtro para os arquivos a serem removidos.</param>
            <param name="removeFilesFromSubdirectories">Se deve remover os arquivos dos subdiretórios.</param>
        </member>
        <member name="M:TestSharp.DirectoryHelper.ReadAllFiles(System.String,System.String)">
            <summary>
            Read all files contents.
            </summary>
            <param name="directoryPath">The directory path.</param>
            <param name="filePattern">The file search pattern.</param>
            <returns>The all files content.</returns>
        </member>
        <member name="M:TestSharp.DirectoryHelper.ReadAllFiles(System.String,System.Text.Encoding,System.String)">
            <summary>
            Read all files contents.
            </summary>
            <param name="directoryPath">The directory path.</param>
            <param name="encoding">The files encoding.</param>
            <param name="filePattern">The file search pattern.</param>
            <returns>The all files content.</returns>
        </member>
        <member name="M:TestSharp.DirectoryHelper.GetDirectoriesInfos(System.String)">
            <summary>
            Retornar os DirectoryInfo dos diretórios
            </summary>
            <param name="path">O caminho para os diretórios.</param>
            <returns>Os DirectoryInfo dos diretórios.</returns>
        </member>
        <member name="M:TestSharp.DirectoryHelper.CopyDirectory(System.String,System.String)">
            <summary>
            Copia um diretório inteiro.
            Baseado nessa solução: http://www.codeproject.com/Articles/3210/Function-to-copy-a-directory-to-another-place-noth
            </summary>
            <param name="sourceDir">O diretório origem.</param>
            <param name="destinationDir">O diretório destiono.</param>
        </member>
        <member name="T:TestSharp.EnumerableAssert">
            <summary>
            Asserts para enumerables
            </summary>
        </member>
        <member name="M:TestSharp.EnumerableAssert.AllItemsAreNotNull(System.Collections.IEnumerable)">
            <summary>
            Verifica se todos os items não são nulos
            </summary>
            <param name="items">Items a serem avaliados.</param>
        </member>
        <member name="T:TestSharp.EventLogHelper">
            <summary>
            Utilitária para questões relativas ao Event Log do Windows.
            </summary>
        </member>
        <member name="P:TestSharp.EventLogHelper.ApplicationEventLog">
            <summary>
            Obtém o log de evento Application.
            </summary>
        </member>
        <member name="P:TestSharp.EventLogHelper.ApplicationEventLogEntries">
            <summary>
            Obtém todas as entradas do log de evento Application.
            </summary>
            <returns></returns>
        </member>
        <member name="M:TestSharp.EventLogHelper.ClearAllApplicationEventLogEntries">
            <summary>
            Remove todas as entradas do log de evento Application.
            </summary>
        </member>
        <member name="M:TestSharp.EventLogHelper.CountApplicationEventLogEntries">
            <summary>
            Conta as entradas existentes no log de evento Application.
            </summary>
            <returns>Número de entradas.</returns>
        </member>
        <member name="M:TestSharp.EventLogHelper.CountApplicationEventLogEntries(System.String,System.Diagnostics.EventLogEntryType,System.Int32)">
            <summary>
            Conta as entradas existentes no log de evento Application.
            </summary>
            <param name="message">A mensagem para filtrar as entradas.</param>
            <param name="type">O tipo para filtrar as entradas.</param>
            <param name="instanceId">O id da instância para filtrar as entradas.</param>
            <returns>Número de entradas.</returns>
        </member>
        <member name="M:TestSharp.EventLogHelper.WriteApplicationEventLogEntry(System.String,System.Diagnostics.EventLogEntryType,System.Int32)">
            <summary>
            Escreve uma entrada no log de evento Application.
            </summary>
            <param name="message">A mensagem.</param>
            <param name="type">O tipo de entrada.</param>
            <param name="instanceId">O id da instância.</param>
        </member>
        <member name="T:TestSharp.ExceptionAssert">
            <summary>
            Assert para Exceptions.
            </summary>
        </member>
        <member name="M:TestSharp.ExceptionAssert.IsThrowing(System.Exception,System.Action)">
            <summary>
            Verifica se o bloco de código executando dentro da Action informada está lançando a exceção informada.
            </summary>
            <remarks>
            Além do lançamento da exceção, também será validado o tipo e a mensagem da exceção.
            </remarks>		
            <param name="expectedException">A exceção esperada.</param>
            <param name="action">Action com o bloco de código que deve lançar a exceção.</param>
        </member>
        <member name="M:TestSharp.ExceptionAssert.IsThrowing(System.Type,System.Action)">
            <summary>
            Verifica se o bloco de código executando dentro da Action informada está lançando a exceção informada sem considerar a mensagem da exceção.
            </summary>
            <remarks>
            Além do lançamento da exceção, também será validado o tipo e a mensagem da exceção.
            </remarks>		
            <param name="expectedExceptionType">O tipo da exceção esperada.</param>
            <param name="action">Action com o bloco de código que deve lançar a exceção.</param>
        </member>
        <member name="M:TestSharp.ExceptionAssert.IsThrowingAny(System.Action,System.Type[])">
            <summary>
            Verifica se o bloco de código executando dentro da Action informada está lançada qualquer um dos tipos das exceções informadas.
            </summary>
            <param name="action">Action com o bloco de código que deve lançar exceção.</param>
            <param name="exceptionsTypes">Os tipos de exceções esperadas.</param>
        </member>
        <member name="M:TestSharp.ExceptionAssert.IsThrowing(System.Type,System.String,System.Action)">
            <summary>
            Verifica se o bloco de código executando dentro da Action informada está lançando a exceção informada.
            </summary>
            <remarks>
            Além do lançamento da exceção, também será validado o tipo e a mensagem da exceção.
            </remarks>		
            <param name="expectedExceptionType">O tipo da exceção esperada.</param>
            <param name="expectedMessage">A mensagem esperada na exceção.</param>
            <param name="action">Action com o bloco de código que deve lançar a exceção.</param>
        </member>
        <member name="T:TestSharp.ExceptionHelper">
            <summary>
            Utilitários para exceções.
            </summary>
        </member>
        <member name="M:TestSharp.ExceptionHelper.GetExceptionThrown(System.Action)">
            <summary>
            Obtém a exceção lançada pela action ou nulo caso não ocorra exceção na execução da action.
            </summary>
            <param name="action">A ação a ser executada.</param>
            <returns>A execeção.</returns>
        </member>
        <member name="T:TestSharp.FileAssert">
            <summary>
            Asserts para arquivos.
            </summary>
        </member>
        <member name="M:TestSharp.FileAssert.Exists(System.String[])">
            <summary>
            Verifica se os arquivos informados existem.
            </summary>
            <param name="filesPaths">Os caminhos dos arquivos.</param>
        </member>
        <member name="M:TestSharp.FileAssert.NonExists(System.String)">
            <summary>
            Verifica se o arquivo informado não existe.
            </summary>
            <param name="filePath">O caminho do arquivo.</param>
        </member>
        <member name="M:TestSharp.FileAssert.IsContent(System.String,System.String)">
            <summary>
            Verifica se o conteúdo do arquivo é igual ao esperado.
            </summary>
            <param name="expectedContent">O conteúdo esperado do arquivo.</param>
            <param name="filePath">O caminho do arquivo.</param>
        </member>
        <member name="M:TestSharp.FileAssert.ContainsContent(System.String,System.String)">
            <summary>
            Verifica se o conteúdo do arquivo possui a substring espeada.
            </summary>
            <param name="expectedSubstringContent">A substring esperada.</param>
            <param name="filePath">O caminho do arquivo.</param>
        </member>
        <member name="M:TestSharp.FileAssert.AreContentEqual(System.String,System.String)">
            <summary>
            Verifica se o conteúdo de dois arquivos são iguais.
            </summary>
            <param name="expectedFilePath">O caminho do arquivo com o conteúdo esperado.</param>
            <param name="actualFilePath">O caminho do arquivo com o conteúdo atual.</param>
        </member>
        <member name="M:TestSharp.FileAssert.IsLastLineContent(System.String,System.String)">
            <summary>
            Verifica se o conteúdo da última linha do arquivo é igual ao esperado.
            </summary>
            <param name="expectedLastLineContent">O conteúdo esperado para a última linha do arquivo.</param>
            <param name="filePath">O caminho do arquivo.</param>
        </member>
        <member name="M:TestSharp.FileAssert.IsCountLines(System.Int32,System.String)">
            <summary>
            Verifica se o número de linhas do arquivo é igual ao esperado.
            </summary>
            <param name="expectedCountLines">O número de linhas esperado do arquivo.</param>
            <param name="filePath">O caminho do arquivo.</param>
        </member>
        <member name="M:TestSharp.FileAssert.IsEmpty(System.String)">
            <summary>
            Verifica se um arquivo está vazio.
            </summary>
            <param name="filePath">O caminho do arquivo.</param>
        </member>
        <member name="M:TestSharp.FileAssert.IsNonEmpty(System.String)">
            <summary>
            Verifica se um arquivo não está vazio.
            </summary>
            <param name="filePath">O caminho do arquivo.</param>
        </member>
        <member name="M:TestSharp.FileAssert.IsLastModification(System.DateTime,System.String)">
            <summary>
            Verifica se a data da última modificação do arquivo é a esperada.
            </summary>
            <param name="expectedLastModification">A data esperada da última modificação do arquivo.</param>
            <param name="filePath">O caminho do arquivo.</param>
        </member>
        <member name="T:TestSharp.FileHelper">
            <summary>
            Utilitária para questões relativas a arquivos.
            </summary>
        </member>
        <member name="M:TestSharp.FileHelper.GetLastModification(System.String)">
            <summary>
            Obtém a data da última modificação do arquivo.
            </summary>
            <param name="fileName">O caminho do arquivo.</param>
            <returns>A data da última modificação.</returns>
        </member>
        <member name="M:TestSharp.FileHelper.CreateFiles(System.String,System.String[])">
            <summary>
            Cria os arquivos informados no diretório.
            </summary>
            <param name="directoryPath">O caminho do diretório onde serão criados os arquivos.</param>
            <param name="filesNames">O nome dos arquivos a serem criados.</param>
        </member>
        <member name="M:TestSharp.FileHelper.CreateFilesWithContent(System.String,System.Func{System.String,System.String},System.String[])">
            <summary>
            Cria os arquivos informados no diretório com o conteudo retornado por getContent.
            </summary>
            <param name="directoryPath">O caminho do diretório onde serão criados os arquivos.</param>
            <param name="getContent">A função que recebe o arquivo que será criado e retorna o conteúdo para o mesmo.</param>
            <param name="filesNames">O nome dos arquivos a serem criados.</param>
        </member>
        <member name="M:TestSharp.FileHelper.DeleteFilesFromDirectory(System.String,System.String[])">
            <summary>
            Exclui os arquivos informados do diretório.
            </summary>
            <param name="directoryPath">O caminho do diretório onde serão excluídos os arquivos.</param>
            <param name="filesNames">O nome dos arquivos a serem excluídos.</param>
        </member>
        <member name="M:TestSharp.FileHelper.DeleteFiles(System.String[])">
            <summary>
            Exclui os arquivos informados.
            </summary>
            <param name="filesPaths">Os caminhos dos arquivos.</param>
        </member>
        <member name="M:TestSharp.FileHelper.ReadAllTextWithoutLock(System.String,System.Text.Encoding)">
            <summary>
            Lê todo o conteúdo do arquivo utilizando apenas acesso de leitura e um FileShare.ReadWrite, 
            isso garante que será possível ler o arquivo mesmo que outro processo tenha um lock de escrita no mesmo.
            </summary>
            <param name="fileName">O caminho do arquivo.</param>
            <param name="encoding">O encoding utilizado para fazer a leitura do arquivo.</param>
            <returns>O conteúdo do arquivo.</returns>
        </member>
        <member name="M:TestSharp.FileHelper.ReadAllTextWithoutLock(System.String)">
            <summary>
            Lê todo o conteúdo do arquivo utilizando apenas acesso de leitura e um FileShare.ReadWrite, 
            isso garante que será possível ler o arquivo mesmo que outro processo tenha um lock de escrita no mesmo.
            </summary>
            <param name="fileName">O caminho do arquivo.</param>
            <returns>O conteúdo do arquivo.</returns>
        </member>
        <member name="M:TestSharp.FileHelper.ReadLastLineWithoutLock(System.String)">
            <summary>
            Lê a última linha do arquivo utilizando apenas acesso de leitura e um FileShare.ReadWrite, 
            isso garante que será possível ler o arquivo mesmo que outro processo tenha um lock de escrita no mesmo.
            </summary>
            <param name="fileName">O caminho do arquivo.</param>
            <returns>O conteúdo da última linha do arquivo.</returns>
        </member>
        <member name="M:TestSharp.FileHelper.ReadAllLines(System.String)">
            <summary>
            Lê a todas as linhas do arquivo utilizando apenas acesso de leitura e um FileShare.ReadWrite, 
            isso garante que será possível ler o arquivo mesmo que outro processo tenha um lock de escrita no mesmo.
            </summary>
            <param name="fileName">O caminho do arquivo.</param>
            <returns>As linhas do arquivo.</returns>
        </member>
        <member name="M:TestSharp.FileHelper.CountLines(System.String)">
            <summary>
            Conta o número de linhas de um arquivo.
            </summary>
            <param name="fileName">O caminho do arquivo.</param>
            <returns>O número de linhas do arquivo.</returns>
        </member>
        <member name="M:TestSharp.FileHelper.Touch(System.String)">
            <summary>
            Atualiza a data de atualização do arquivo.
            </summary>
            <param name="fileName">O caminho do arquivo.</param>
        </member>
        <member name="M:TestSharp.FileHelper.Touch(System.String,System.DateTime)">
            <summary>
            Atualiza a data de atualização do arquivo.
            </summary>
            <param name="fileName">O caminho do arquivo.</param>
            <param name="date">A data de atualização do arquivo.</param>
        </member>
        <member name="M:TestSharp.FileHelper.Touch(System.String[],System.DateTime)">
            <summary>
            Atualiza a data de atualização de todos os arquivos.
            </summary>
            <param name="fileNames">Os caminhos dos arquivos.</param>
            <param name="date">A data de atualização dos arquivos.</param>
        </member>
        <member name="M:TestSharp.FileHelper.WaitForFileContentContains(System.String,System.String,System.Text.Encoding,System.Int32)">
            <summary>
            Aguarda até que o arquivo tenha em seu conteúdo a substring informada.
            </summary>
            <param name="fileName">O caminho do arquivo.</param>
            <param name="expectedContentSubstring">A sustring a ser aguardada a existir no arquivo</param>
            <param name="encoding">O encoding utilizado na leitura do arquivo.</param>
            <param name="secondsTimeout">Os segundos que devem ser aguardados até que retorne.</param>
        </member>
        <member name="M:TestSharp.FileHelper.WaitForFileContentContains(System.String,System.String,System.Int32)">
            <summary>
            Aguarda até que o arquivo tenha em seu conteúdo a substring informada.
            </summary>
            <param name="fileName">O caminho do arquivo.</param>
            <param name="expectedContentSubstring">A sustring a ser aguardada a existir no arquivo</param>
            <param name="secondsTimeout">Os segundos que devem ser aguardados até que retorne.</param>
        </member>
        <member name="M:TestSharp.FileHelper.ContainsContent(System.String,System.String)">
            <summary>
            Verifica se o arquivo informado contém a substring informada.
            </summary>
            <param name="fileName">O caminho do arquivo.</param>
            <param name="expectedSubstringContent">A substring a ser verificada no conteúdo do arquivo.</param>
            <returns>True se a substring existe no conteúdo do arquivo, false no contrário.</returns>
        </member>
        <member name="T:TestSharp.FlowAssert">
            <summary>
            Asserts para fluxos de execução.
            </summary>
        </member>
        <member name="M:TestSharp.FlowAssert.IsAtLeastOneOk(System.Action[])">
            <summary>
            Valida se pelo menos um dos fluxos de execução executa sem exceção.
            </summary>
            <param name="flows">As actions para os fluxos de execução a serem executados.</param>
        </member>
        <member name="M:TestSharp.FlowAssert.IsAtLeastOneAttemptOk(System.Int32,System.Action)">
            <summary>
            Tenta executar o fluxo de execução até que não gere exceção ou até alcançar o número máximo de tentativas.
            </summary>
            <param name="maxAttempts">Número máximo de tentativas.</param>
            <param name="flow">O fluxo a ser executado.</param>
        </member>
        <member name="T:TestSharp.IO.Context.IDirectoryDiscoverer">
            <summary>
            Defines an interface for a directory discoverer.
            </summary>
        </member>
        <member name="M:TestSharp.IO.Context.IDirectoryDiscoverer.DiscoverPath(System.String)">
            <summary>
            Try to discover the path of the folder with the specified name.
            </summary>
            <returns>The path.</returns>
            <param name="folderName">The folder name.</param>
        </member>
        <member name="T:TestSharp.IO.Context.IIOContextFactory">
            <summary>
            Defines the interface o IO context's factory.
            </summary>
        </member>
        <member name="M:TestSharp.IO.Context.IIOContextFactory.CreateDirectoryDiscoverer">
            <summary>
            Creates a directory discoverer.
            </summary>
            <returns>The directory discoverer.</returns>
        </member>
        <member name="T:TestSharp.IO.Context.IOContext">
            <summary>
            Defines the IO context used internally by utilities during the tests executing.
            </summary>
        </member>
        <member name="M:TestSharp.IO.Context.IOContext.DiscoverPath(System.String)">
            <summary>
            Try to discover the path of the folder with the specified name.
            </summary>
            <returns>The path.</returns>
            <param name="folderName">The folder name.</param>
        </member>
        <member name="T:TestSharp.IO.Context.TeamCity.TeamCityDirectoryDiscoverer">
            <summary>
            TeamCity directory discoverer.
            </summary>
        </member>
        <member name="M:TestSharp.IO.Context.TeamCity.TeamCityDirectoryDiscoverer.DiscoverPath(System.String)">
            <summary>
            Try to discover the path of the folder with the specified name.
            </summary>
            <returns>The path.</returns>
            <param name="folderName">The folder name.</param>
        </member>
        <member name="M:TestSharp.IO.Context.TeamCity.TeamCityDirectoryDiscoverer.DiscoverPath(System.String,System.String)">
            <summary>
            Discovers the path.
            </summary>
            <returns>The path.</returns>
            <param name="folderName">Folder name.</param>
            <param name="rootPath">Root path.</param>
        </member>
        <member name="T:TestSharp.IO.Context.TeamCity.TeamCityIOContextFactory">
            <summary>
            TeamCity IO context factory.
            </summary>
        </member>
        <member name="M:TestSharp.IO.Context.TeamCity.TeamCityIOContextFactory.CreateDirectoryDiscoverer">
            <summary>
            Creates a directory discoverer.
            </summary>
            <returns>The directory discoverer.</returns>
        </member>
        <member name="T:TestSharp.IO.Context.VisualStudio.VisualStudioDirectoryDiscoverer">
            <summary>
            Visual Studio directory discoverer.
            </summary>
        </member>
        <member name="M:TestSharp.IO.Context.VisualStudio.VisualStudioDirectoryDiscoverer.DiscoverPath(System.String)">
            <summary>
            Try to discover the path of the folder with the specified name.
            </summary>
            <returns>The path.</returns>
            <param name="folderName">The folder name.</param>
        </member>
        <member name="M:TestSharp.IO.Context.VisualStudio.VisualStudioDirectoryDiscoverer.DiscoverFullPath(System.String,System.String)">
            <summary>
            Discovers the full path.
            </summary>
            <returns>The full path.</returns>
            <param name="folderName">Folder name.</param>
            <param name="rootFolderPath">Root folder path.</param>
        </member>
        <member name="T:TestSharp.IO.Context.VisualStudio.VisualStudioIOContextFactory">
            <summary>
            Visual Studio IO context factory.
            </summary>
        </member>
        <member name="M:TestSharp.IO.Context.VisualStudio.VisualStudioIOContextFactory.CreateDirectoryDiscoverer">
            <summary>
            Creates a directory discoverer.
            </summary>
            <returns>The directory discoverer.</returns>
        </member>
        <member name="T:TestSharp.NetHelper">
            <summary>
            Utilitária para questões relativas a rede.
            </summary>
        </member>
        <member name="M:TestSharp.NetHelper.GetContent(System.String)">
            <summary>
            Obtém o conteúdo de uma página web.
            </summary>
            <param name="url">A URL da página.</param>
            <returns>O conteúdo da página.</returns>
        </member>
        <member name="M:TestSharp.NetHelper.GetContent(System.String,System.Int32)">
            <summary>
            Obtém o conteúdo de uma página web.
            </summary>
            <param name="url">A URL da página.</param>
            <param name="timeout">O timeout, em milisegundos, para a requisição. O padrão é 100.000.</param>
            <returns>O conteúdo da página.</returns>
        </member>
        <member name="M:TestSharp.NetHelper.GetContent(System.String,System.Text.Encoding,System.Int32)">
            <summary>
            Obtém o conteúdo de uma página web.
            </summary>
            <param name="url">A URL da página.</param>
            <param name="encoding">O enconding utilizado para ler a página.</param>
            <param name="timeout">O timeout, em milisegundos, para a requisição. O padrão é 100.000.</param>
            <returns>O conteúdo da página.</returns>
        </member>
        <member name="M:TestSharp.NetHelper.IsRedirected(System.String,System.Int32)">
            <summary>
            Verifica se a URL foi redirecionado no servidor.
            </summary>
            <param name="url">A URL.</param>
            <param name="timeout">O timeout, em milisegundos, para a requisição. O padrão é 100.000.</param>
            <returns>True se foi redirecionado, false no contrário.</returns>
        </member>
        <member name="M:TestSharp.NetHelper.Request(System.String,System.Boolean)">
            <summary>
            Requisita uma URL sem considerar seu conteúdo.
            <remarks>Útil para casos onde não é necessário ler o conteúdo da página e onde redirecionamentos acabam em status code 403, por exemplo.</remarks>
            </summary>
            <param name="url">A URL da página.</param>
            <param name="throwError">Se deve lançar erro caso ocorra uma exceção, por exemplo 403.</param>
        </member>
        <member name="M:TestSharp.NetHelper.IsResponding(System.String,System.Nullable{System.Net.HttpStatusCode})">
            <summary>
            Determines whether the specified URL is responding.
            </summary>
            <param name="url">The URL.</param>
            <param name="expectedStatusCode">The expected status code.</param>
            <returns></returns>
        </member>
        <member name="T:TestSharp.PathAssert">
            <summary>
            Asserts para caminhos no sistema de arquivos.
            </summary>
        </member>
        <member name="M:TestSharp.PathAssert.IsPathRooted(System.String)">
            <summary>
            Verifica se o caminho é absoluto.
            </summary>
            <param name="actualPath">O caminho a ser verificado.</param>
        </member>
        <member name="T:TestSharp.ProcessAssert">
            <summary>
            Asserts para processos.
            </summary>
        </member>
        <member name="M:TestSharp.ProcessAssert.IsProcessInstancesCount(System.Int32,System.String)">
            <summary>
            Verifica se o número de instâncias do processo é o esperado.
            </summary>
            <param name="expectedProcessesCount">O número esperado de instâncias do processo.</param>
            <param name="processName">O nome do processo.</param>
        </member>
        <member name="T:TestSharp.ProcessHelper">
            <summary>
            Utilitária para questões relativas a processos.
            </summary>
        </member>
        <member name="M:TestSharp.ProcessHelper.Run(System.String,System.String,System.Boolean)">
            <summary>
            Executa um processo.
            </summary>
            <param name="exePath">O caminho do executável do processo.</param>
            <param name="arguments">Argumentos para o processo.</param>
            <param name="waitForExit">Se deve aguardar pelo fim da execução do processo.</param>
            <returns>O conteúdo da saída do processo.</returns>		
        </member>
        <member name="M:TestSharp.ProcessHelper.CountInstances(System.String)">
            <summary>
            Conta o número de instâncias do processo.
            </summary>
            <param name="processName">Nome do processo.</param>
            <returns>Número de instâncias do processo.</returns>        
        </member>
        <member name="M:TestSharp.ProcessHelper.WaitForExit(System.String)">
            <summary>
            Aguarda pela finalização do processo informado.
            </summary>
            <param name="processName">Nome do processo.</param>		
        </member>
        <member name="M:TestSharp.ProcessHelper.Kill(System.Int32)">
            <summary>
            Kill the process with the specified ID.
            </summary>
            <param name="id">Identifier.</param>
        </member>
        <member name="M:TestSharp.ProcessHelper.KillFirst(System.String)">
            <summary>
            Encerra a primeira instância do processo informado.
            </summary>
            <param name="processName">O nome do processo.</param>	    
        </member>
        <member name="M:TestSharp.ProcessHelper.KillAll(System.String)">
            <summary>
            Encerra todas as instâncias do processo informado.
            </summary>
            <param name="processName">O nome do processo.</param>		
        </member>
        <member name="T:TestSharp.RegexAssert">
            <summary>
            Asserções para expressões regulares.
            </summary>
        </member>
        <member name="M:TestSharp.RegexAssert.IsMatch(System.String,System.String)">
            <summary>
            Valida se expressão regular informada combina com a entrada.
            </summary>
            <param name="expectedRegexPattern">A expressão regular.</param>
            <param name="actualInput">O conteúdo onde será executada a expressão regular.</param>
        </member>
        <member name="T:TestSharp.ServiceAssert">
            <summary>
            Asserts para serviços.
            </summary>
        </member>
        <member name="M:TestSharp.ServiceAssert.IsRunning(System.String)">
            <summary>
            Verifica se o serviço está em execução.
            </summary>
            <param name="serviceName">O nome do serviço.</param>
        </member>
        <member name="M:TestSharp.ServiceAssert.IsStopped(System.String)">
            <summary>
            Verifica se o serviço está parado.
            </summary>
            <param name="serviceName">O nome do serviço.</param>
        </member>
        <member name="T:TestSharp.ServiceHelper">
            <summary>
            Utilitária para questões referentes a Windows Services.
            </summary>
        </member>
        <member name="M:TestSharp.ServiceHelper.ForceStart(System.String)">
            <summary>
            Força o início da execução de um serviço. Caso o serviço já esteja em execução, esse será encerrado e iniciado novamente.
            </summary>
            <param name="serviceName">O nome do serviço.</param>
        </member>
        <member name="M:TestSharp.ServiceHelper.Stop(System.String)">
            <summary>
            Para a execução do serviço informado.
            </summary>
            <param name="serviceName">O nome do serviço.</param>
        </member>
        <member name="M:TestSharp.ServiceHelper.IsRunning(System.String)">
            <summary>
            Verifica se o serviço informado está em execução.
            </summary>
            <param name="serviceName">O nome do serviço.</param>
            <returns>True se o serviço está em execução, false no contrário.</returns>
        </member>
        <member name="M:TestSharp.ServiceHelper.IsStopped(System.String)">
            <summary>
            Verifica se o serviço informado está parado.
            </summary>
            <param name="serviceName">O nome do serviço.</param>
            <returns>True se o serviço está parado, false no contrário.</returns>
        </member>
        <member name="M:TestSharp.ServiceHelper.Install(System.String)">
            <summary>
            Realiza a instalação do serviço.
            </summary>
            <param name="serviceFilePath">O caminho do arquivo executável do serviço a ser instalado.</param>
        </member>
        <member name="M:TestSharp.ServiceHelper.Uninstall(System.String)">
            <summary>
            Realiza a desinstalação do serviço.
            </summary>
            <param name="serviceFilePath">O caminho do arquivo executável do serviço a ser desinstalado.</param>
        </member>
        <member name="M:TestSharp.ServiceHelper.Reinstall(System.String)">
            <summary>
            Realiza a reinstalação do serviço.
            </summary>
            <param name="serviceFilePath">O caminho do arquivo executável do serviço a ser reinstalado.</param>
        </member>
        <member name="T:TestSharp.SqlHelper">
            <summary>
            Helper for SQL commands.
            <remarks>
            To use SqlHelper, before define a connection string with the name 'Test' on ConnectionStrings section or define the value of SqlHelper.ConnectionString property.
            </remarks>
            </summary>
        </member>
        <member name="P:TestSharp.SqlHelper.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="M:TestSharp.SqlHelper.ExecuteScalar(System.String,System.Object[])">
            <summary>
            Executes a scalar command, like SELECT COUNT(1) TABLENAME.
            </summary>
            <returns>The scalar result value of the command.</returns>
            <param name="command">The command.</param>
            <param name="parameters">The command parameters.</param>
        </member>
        <member name="M:TestSharp.SqlHelper.GetInt(System.String,System.Object[])">
            <summary>
            Obtém um resultado inteiro da execução do comando escalar informado.
            </summary>
            <param name="command">O comando escalar a ser executado.</param>
            <param name="parameters">Os parâmetros (SqlParameter) do comando.</param>
            <returns>O resultado da execução do comando.</returns>
        </member>
        <member name="M:TestSharp.SqlHelper.ExecuteNonQuery(System.String,System.Object[])">
            <summary>
            Realiza um SqlCommand.ExecuteNowQuery.
            </summary>
            <param name="command">O comando a ser executado.</param>
            <param name="parameters">Os parâmetros (SqlParameter) do comando.</param>
            <returns>O resultado da execução do comando.</returns>
        </member>
        <member name="M:TestSharp.SqlHelper.ExecuteDateTable(System.String,System.Object[])">
            <summary>
            Retorna um DataTable preenchido com o resultado da execução do comando informado.		
            </summary>
            <param name="command">O comando a ser executado.</param>
            <param name="parameters">Os parâmetros (SqlParameter) do comando.</param>
            <returns>O DataTable com o resultado da execução do comando.</returns>
        </member>
        <member name="M:TestSharp.SqlHelper.ExecuteDateSet(System.String,System.Object[])">
            <summary>
            Retorna um DataSet preenchido com o resultado da execução do comando informado.
            </summary>
            <param name="command">O comando a ser executado.</param>
            <param name="parameters">Os parâmetros (SqlParameter) do comando.</param>
            <returns>O DataSet com o resultado da execução do comando.</returns>
        </member>
        <member name="T:TestSharp.TextAssert">
            <summary>
            Asserts para strings (o nome StringAssert já estava ocupado :p).
            </summary>
        </member>
        <member name="M:TestSharp.TextAssert.IsNullOrEmpty(System.String)">
            <summary>
            Verifica se a string é nula ou vazia.
            </summary>
            <param name="actual">A string a ser verificada.</param>
        </member>
        <member name="M:TestSharp.TextAssert.IsNotNullOrEmpty(System.String)">
            <summary>
            Verifica se a string não é nula ou vazia.
            </summary>
            <param name="actual">A string a ser verificada.</param>
        </member>
        <member name="T:TestSharp.VSProjectHelper">
            <summary>
            Utilitários para projetos do Visual Studio.
            </summary>
        </member>
        <member name="M:TestSharp.VSProjectHelper.GetProjectFolderPath(System.String)">
            <summary>
            Obtém o caminho para a pasta do projeto.
            </summary>
            <param name="projectFolderName">O nome da pasta do projeto.</param>
            <returns>O caminho para a pasta do projeto.</returns>
        </member>
        <member name="T:TestSharp.WebHostHelper">
            <summary>
            Utilitária para auxiliar na inicialização e finalização do servidor de desenvolvimento do VS.
            </summary>
        </member>
        <member name="P:TestSharp.WebHostHelper.WebHostProcessName">
            <summary>
            Obtém o nome do processo do servidor de desenvolvimento do VS.
            </summary>
        </member>
        <member name="P:TestSharp.WebHostHelper.WebDevWebServerPath">
            <summary>
            Obtém o caminho do executável do servidor de desenvolvimento do VS.
            </summary>
        </member>
        <member name="P:TestSharp.WebHostHelper.InstancesCount">
            <summary>
            Gets the instances count of running web hosts.
            </summary>
            <value>The instances count.</value>
        </member>
        <member name="M:TestSharp.WebHostHelper.KillAll">
            <summary>
            Encerra todos os processos do WebDev.WebServer.
            </summary>
        </member>
        <member name="M:TestSharp.WebHostHelper.Start(System.String,System.Int32)">
            <summary>
            Inicia a hospedagem do web site referente a pasta de projeto informada através do WebDev.WebServer.
            </summary>
            <param name="projectFolderName">O nome da pasta do projeto. NOTA: apenas o nome.</param>
            <param name="port">Porta que deve ser utilizada no WebDev.WebServer.</param>
        </member>
        <member name="M:TestSharp.WebHostHelper.StartAndWaitForResponse(System.String,System.Int32,System.Nullable{System.Net.HttpStatusCode})">
            <summary>
            Starts hosting the web site from project folder wait for response.
            </summary>
            <param name="projectFolderName">Name of the project folder.</param>
            <param name="port">The port.</param>
            <param name="statusCode">The expected status code.</param>
            <returns>The process.</returns>
        </member>
        <member name="M:TestSharp.WebHostHelper.IsRunningByPort(System.Int32)">
            <summary>
            Determines whether there is a web host runing in the specified port.
            </summary>
            <param name="port">The port.</param>
            <returns>True if it is running.</returns>
        </member>
        <member name="M:TestSharp.WebHostHelper.StopByPort(System.Int32)">
            <summary>
            Stops the web host by port number.
            </summary>
            <param name="port">The port.</param>
            <returns>True if a web host with specified port was found.</returns>
        </member>
        <member name="T:TestSharp.WmiAssert">
            <summary>
            Asserts para WMI.
            </summary>
        </member>
        <member name="M:TestSharp.WmiAssert.IsPropertyValue``1(``0,System.String,System.String,System.String)">
            <summary>
            Verifica se o valor de propriedade WMI é o espeardo.
            </summary>
            <typeparam name="TValue">O tipo do valor da propriedade.</typeparam>
            <param name="expectedValue">O valor esperado da propriedade.</param>
            <param name="scope">O escopo onde está publicada a entidade WMI. Por exemplo: "\root\cimv2"</param>
            <param name="entityName">O nome da entidade WMI.</param>
            <param name="propertyName">O nome da propriedade a ser lida.</param>
        </member>
        <member name="M:TestSharp.WmiAssert.AtLeastOnePropertyValue``1(``0,System.String,System.String,System.String)">
            <summary>
            Verifica se pelo menos uma das instâncias da propriedade WMI possui o valor espeardo.
            </summary>
            <typeparam name="TValue">O tipo do valor da propriedade.</typeparam>
            <param name="expectedValue">O valor esperado da propriedade.</param>
            <param name="scope">O escopo onde está publicada a entidade WMI. Por exemplo: "\root\cimv2"</param>
            <param name="entityName">O nome da entidade WMI.</param>
            <param name="propertyName">O nome da propriedade a ser lida.</param>
        </member>
        <member name="T:TestSharp.WmiHelper">
            <summary>
            Utilitária para WMI (Windows Management Instrumentation).
            </summary>
        </member>
        <member name="M:TestSharp.WmiHelper.GetPropertyValue``1(System.String,System.String,System.String)">
            <summary>
            Obtém o valor de uma propriedade de uma entidade publicada no WMI.
            </summary>
            <typeparam name="TValue">O tipo da propriedade.</typeparam>
            <param name="scope">O escopo onde está publicada a entidade WMI. Por exemplo: "\root\cimvC:\CWI\Terra\Terra.Adv.CatalogCleaner\trunk\SRC\Terra.Adv.CatalogCleaner.Infrastructure\Monitoring\CatalogCleanerEntity.cs2"</param>
            <param name="entityName">O nome da entidade WMI.</param>
            <param name="propertyName">O nome da propriedade a ser lida.</param>
            <returns>O valor da propriedade.</returns>
        </member>
        <member name="M:TestSharp.WmiHelper.GetPropertyValues``1(System.String,System.String,System.String)">
            <summary>
            Obtém todos valores em todas as entidades de uma propriedade de uma entidade publicada no WMI.
            </summary>
            <typeparam name="TValue">O tipo da propriedade.</typeparam>
            <param name="scope">O escopo onde está publicada a entidade WMI. Por exemplo: "\root\cimvC:\CWI\Terra\Terra.Adv.CatalogCleaner\trunk\SRC\Terra.Adv.CatalogCleaner.Infrastructure\Monitoring\CatalogCleanerEntity.cs2"</param>
            <param name="entityName">O nome da entidade WMI.</param>
            <param name="propertyName">O nome da propriedade a ser lida.</param>
            <returns>O valor da propriedade.</returns>
        </member>
        <member name="T:TestSharp.ZipHelper">
            <summary>
            Utilitários para compactação/descompatação no formato ZIP.
            </summary>
        </member>
        <member name="M:TestSharp.ZipHelper.ExtractAll(System.String,System.String)">
            <summary>
            Descompacta todo o arquivo informado no diretório de destino.
            </summary>
            <param name="zipFilePath">O caminho do arquivo .zip.</param>
            <param name="destinationDirectoryPath">O diretório destino para os arquivos descompactados.</param>
        </member>
        <member name="T:TestSharp.TimeAssert">
            <summary>
            Time assert.
            </summary>
        </member>
        <member name="M:TestSharp.TimeAssert.LessThan(System.Int32,System.Action)">
            <summary>
            Assert if action will be executed in less than expected milliseconds.
            </summary>
            <param name="milliseconds">Milliseconds.</param>
            <param name="action">Action.</param>
        </member>
    </members>
</doc>
